from opv_csv_parser import openvas_csv_parse_detail
from msf_cve_extracter import msf_csv_extract

class mapper_opn2msf_cve():

	def __init__(self,openvas_csv_file, msf_module_file):
		self.openvas_csv_file = openvas_csv_file
		self.msf_module_file  = msf_module_file

		self.opvas_csv 	= openvas_csv_parse_detail(self.openvas_csv_file)
		self.op_csv = self.opvas_csv.openvas_cve_dict() #contain openvas host cve and ip {'port#':cve , 'ip_addr':'' }
		self.op_resul = self.opvas_csv.openvas_result_dict() #contain all result e.g resul['ports']['80']['severity']. ip,host


		self.msf_cve 	= msf_csv_extract(self.msf_module_file)
		self.msf_cve = self.msf_cve.msf_exploit_cve()

		self.msf_cve_lst     = []
		self.msf_exploit  = []

		self.ip_addr = ''
		self.host_port = []
		self.host_cve  = []
		self.host_cve_port_dict = {} #final resul for cve as key and port value 

		self.msf_cve_seperator()
		self.openvas_cve_seperator()

	def msf_cve_seperator(self):

			for k,v in self.msf_cve.items():
				if k:
					self.msf_cve_lst.append(k)
					self.msf_exploit.append(v)

			# print len(self.msf_cve_lst)
			# print len(self.msf_exploit)


	def openvas_cve_seperator(self):

			# print self.op_csv
			for k,v in self.op_csv.items():
				if k =='ip_addr':
					self.ip_addr = v

				else:
					self.host_port.append(k)
					v = v.replace(" ","")
					self.host_cve.append(v)
					one_port_cve = v.split(",")

					for i in one_port_cve:
						self.host_cve_port_dict[i] = k # k= port number and i= cve number for port 


	def mapper(self):


			print "*"*65
			print "		Mapped Exploits "
			print "*"*65
			# print self.ip_addr
			
			temp_final_mapping_resul = {}

			temp_final_mapping_resul['ip'] = self.ip_addr

			for i in self.msf_cve_lst:
				temp_cve_mapping_resul   = []
				for j in self.host_cve:
					if i == j:

						cve 	 	= i
						serv_port	= self.host_cve_port_dict[i]
						exploit 	= self.msf_cve[i]
						vul_sevrity = self.op_resul['ports'][self.host_cve_port_dict[i]]['sevrity']
						vul_protocol= self.op_resul['ports'][self.host_cve_port_dict[i]]['proto']
						
						temp_cve_mapping_resul.append(cve)
						temp_cve_mapping_resul.append(serv_port)
						temp_cve_mapping_resul.append(vul_protocol)
						temp_cve_mapping_resul.append(vul_sevrity)
						temp_cve_mapping_resul.append(exploit)

						temp_final_mapping_resul[cve] = temp_cve_mapping_resul
						print temp_cve_mapping_resul


						# resul =""
						# resul =   i+","+self.host_cve_port_dict[i]+","+self.msf_cve[i]
						# print resul
						# print self.op_resul['ports'][self.host_cve_port_dict[i]]['sevrity']
						# print cve,port,exploit,vul_sevrity

			# print temp_final_mapping_resul.keys()
			print "*"*65
			# print temp_final_mapping_resul['ip']
			# print temp_final_mapping_resul['CVE-2007-2447']
			# print 
			# print 

			'''
				return will be mapped cve with msf exploits 
				dictionary contains 
				ip 
				cve :[list of details e.g port# porotocol rank and exploit name ]
				e.g temp_final_mapping_resul['CVE-2004-2687']
			'''
			return temp_final_mapping_resul









# if __name__ == '__main__':
# 	opv  = '/root/Desktop/celery_setup.txt/dj_file_upload/hicarser/reports/openvas/opv_176_192.168.0.78/csv/192.168.0.78.csv'
# 	ms    = '/root/Desktop/celery_setup.txt/dj_file_upload/hicarser/msf_module_result/msf_module_cve.txt'
	
# 	a= mapper_opn2msf_cve(opv,ms)
# 	print a.mapper()



















